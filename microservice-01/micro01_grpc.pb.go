// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: micro01.proto

package microservice_01

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Micro01_UserCreate_FullMethodName = "/micro01.Micro01/UserCreate"
	Micro01_UserFetch_FullMethodName  = "/micro01.Micro01/UserFetch"
	Micro01_UserUpdate_FullMethodName = "/micro01.Micro01/UserUpdate"
	Micro01_UserDelete_FullMethodName = "/micro01.Micro01/UserDelete"
)

// Micro01Client is the client API for Micro01 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Micro01Client interface {
	UserCreate(ctx context.Context, in *Details, opts ...grpc.CallOption) (*Empty, error)
	UserFetch(ctx context.Context, in *Get, opts ...grpc.CallOption) (*Details, error)
	UserUpdate(ctx context.Context, in *Details, opts ...grpc.CallOption) (*Empty, error)
	UserDelete(ctx context.Context, in *Get, opts ...grpc.CallOption) (*Empty, error)
}

type micro01Client struct {
	cc grpc.ClientConnInterface
}

func NewMicro01Client(cc grpc.ClientConnInterface) Micro01Client {
	return &micro01Client{cc}
}

func (c *micro01Client) UserCreate(ctx context.Context, in *Details, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Micro01_UserCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *micro01Client) UserFetch(ctx context.Context, in *Get, opts ...grpc.CallOption) (*Details, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Details)
	err := c.cc.Invoke(ctx, Micro01_UserFetch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *micro01Client) UserUpdate(ctx context.Context, in *Details, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Micro01_UserUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *micro01Client) UserDelete(ctx context.Context, in *Get, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Micro01_UserDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Micro01Server is the server API for Micro01 service.
// All implementations must embed UnimplementedMicro01Server
// for forward compatibility.
type Micro01Server interface {
	UserCreate(context.Context, *Details) (*Empty, error)
	UserFetch(context.Context, *Get) (*Details, error)
	UserUpdate(context.Context, *Details) (*Empty, error)
	UserDelete(context.Context, *Get) (*Empty, error)
	mustEmbedUnimplementedMicro01Server()
}

// UnimplementedMicro01Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMicro01Server struct{}

func (UnimplementedMicro01Server) UserCreate(context.Context, *Details) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedMicro01Server) UserFetch(context.Context, *Get) (*Details, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFetch not implemented")
}
func (UnimplementedMicro01Server) UserUpdate(context.Context, *Details) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedMicro01Server) UserDelete(context.Context, *Get) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDelete not implemented")
}
func (UnimplementedMicro01Server) mustEmbedUnimplementedMicro01Server() {}
func (UnimplementedMicro01Server) testEmbeddedByValue()                 {}

// UnsafeMicro01Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Micro01Server will
// result in compilation errors.
type UnsafeMicro01Server interface {
	mustEmbedUnimplementedMicro01Server()
}

func RegisterMicro01Server(s grpc.ServiceRegistrar, srv Micro01Server) {
	// If the following call pancis, it indicates UnimplementedMicro01Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Micro01_ServiceDesc, srv)
}

func _Micro01_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Details)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Micro01Server).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Micro01_UserCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Micro01Server).UserCreate(ctx, req.(*Details))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro01_UserFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Micro01Server).UserFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Micro01_UserFetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Micro01Server).UserFetch(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro01_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Details)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Micro01Server).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Micro01_UserUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Micro01Server).UserUpdate(ctx, req.(*Details))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro01_UserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Micro01Server).UserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Micro01_UserDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Micro01Server).UserDelete(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

// Micro01_ServiceDesc is the grpc.ServiceDesc for Micro01 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Micro01_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "micro01.Micro01",
	HandlerType: (*Micro01Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCreate",
			Handler:    _Micro01_UserCreate_Handler,
		},
		{
			MethodName: "UserFetch",
			Handler:    _Micro01_UserFetch_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _Micro01_UserUpdate_Handler,
		},
		{
			MethodName: "UserDelete",
			Handler:    _Micro01_UserDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "micro01.proto",
}
