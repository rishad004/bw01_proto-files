// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: micro02.proto

package microservice_02

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Micro02_Method01_FullMethodName = "/micro02.Micro02/Method01"
	Micro02_Method02_FullMethodName = "/micro02.Micro02/Method02"
)

// Micro02Client is the client API for Micro02 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Micro02Client interface {
	Method01(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Details, error)
	Method02(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Details, error)
}

type micro02Client struct {
	cc grpc.ClientConnInterface
}

func NewMicro02Client(cc grpc.ClientConnInterface) Micro02Client {
	return &micro02Client{cc}
}

func (c *micro02Client) Method01(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Details, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Details)
	err := c.cc.Invoke(ctx, Micro02_Method01_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *micro02Client) Method02(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Details, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Details)
	err := c.cc.Invoke(ctx, Micro02_Method02_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Micro02Server is the server API for Micro02 service.
// All implementations must embed UnimplementedMicro02Server
// for forward compatibility.
type Micro02Server interface {
	Method01(context.Context, *Data) (*Details, error)
	Method02(context.Context, *Data) (*Details, error)
	mustEmbedUnimplementedMicro02Server()
}

// UnimplementedMicro02Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMicro02Server struct{}

func (UnimplementedMicro02Server) Method01(context.Context, *Data) (*Details, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method01 not implemented")
}
func (UnimplementedMicro02Server) Method02(context.Context, *Data) (*Details, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method02 not implemented")
}
func (UnimplementedMicro02Server) mustEmbedUnimplementedMicro02Server() {}
func (UnimplementedMicro02Server) testEmbeddedByValue()                 {}

// UnsafeMicro02Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Micro02Server will
// result in compilation errors.
type UnsafeMicro02Server interface {
	mustEmbedUnimplementedMicro02Server()
}

func RegisterMicro02Server(s grpc.ServiceRegistrar, srv Micro02Server) {
	// If the following call pancis, it indicates UnimplementedMicro02Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Micro02_ServiceDesc, srv)
}

func _Micro02_Method01_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Micro02Server).Method01(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Micro02_Method01_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Micro02Server).Method01(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Micro02_Method02_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Micro02Server).Method02(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Micro02_Method02_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Micro02Server).Method02(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

// Micro02_ServiceDesc is the grpc.ServiceDesc for Micro02 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Micro02_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "micro02.Micro02",
	HandlerType: (*Micro02Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Method01",
			Handler:    _Micro02_Method01_Handler,
		},
		{
			MethodName: "Method02",
			Handler:    _Micro02_Method02_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "micro02.proto",
}
